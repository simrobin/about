#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

var_read() {
  local SECRET_ARG=""
  if [[ ${3:-} == "secret" ]]; then
    SECRET_ARG="-s"
  fi

  if [[ -z ${!1:-} ]]; then
    if [[ -z ${SCRIPTS_NO_INTERACTIVE:-} ]]; then
      read ${SECRET_ARG?} -r -p "${1}${2:+ [${2}]}=" READ_VALUE
    fi

    eval "${1}=${READ_VALUE:-${2}}"

    if [[ ${SECRET_ARG} == "-s" ]]; then
      printf "\n"
    fi
  elif [[ ${SECRET_ARG} != "-s" ]]; then
    printf "%s=%s\n" "${1}" "${!1}"
  else
    printf "Using secret %s\n" "${1}"
  fi
}

var_color() {
  export RED='\033[0;31m'
  export GREEN='\033[0;32m'
  export BLUE='\033[0;34m'
  export YELLOW='\033[33m'
  export RESET='\033[0m'
}

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  var_color

  if [[ ${#} -ne 2 ]]; then
    printf "%bUsage: ${0} [APP_NAME] [COMPOSE_FILE]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  var_read DEPLOY_URL
  var_read DEPLOY_CREDENTIALS

  local HTTP_OUTPUT="http_output.txt"
  local HTTP_STATUS

  HTTP_STATUS=$(curl -q -sSL --max-time 90 -X POST -u "${DEPLOY_CREDENTIALS}" -o "${HTTP_OUTPUT}" -w "%{http_code}" "${DEPLOY_URL}/${1}/" --data-binary "${2}")

  cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
    exit 1
  fi
}

main "${@:-}"
